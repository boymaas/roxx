#!/usr/bin/env ruby
# == Usage
#
#   record-script -t deepener -n time-capsule scripts/deepener/time-capsule.txt
#
# == Mandatory Options
#   -t, --type-of-script TYPE
#   -n, --name-of-script TYPE
#
# == Options
#   -h, --help          Displays help message
#   -v, --version       Display the version, then exit
#   -q, --quiet         Output as little as possible, overrides verbose
#   -V, --verbose       Verbose output

require 'optparse' 
require 'rdoc/usage'
require 'ostruct'
require 'date'
require 'pathname'

# add current-dir to load-path
root_dir = Pathname.new(__FILE__).dirname.parent
$:.unshift(root_dir) unless $:.include?(root_dir) || $:.include?(root_dir.realpath)

require 'lib/recordings'

class App
  VERSION = '0.0.1'
  ValidTypes = [:deepener, :inductions, :deduction, :scripts] 

  attr_reader :options

  def initialize(arguments, stdin)
    @arguments = arguments
    @stdin = stdin
    
    # Set defaults
    @options = OpenStruct.new
    @options.verbose = false
    @options.quiet = false
    # TO DO - add additional defaults
  end

  # Parse options, check arguments, then process the command
  def run
        
    if parsed_options? && arguments_valid? 
      
      puts "Start at #{DateTime.now}\n\n" if @options.verbose
      
      output_options if @options.verbose # [Optional]
            
      process_arguments            
      process_command
      
      puts "\nFinished at #{DateTime.now}" if @options.verbose
      
    else
      output_usage
    end
      
  end
  
  protected
  
    def parsed_options?
      
      # Specify options
      opts = OptionParser.new 
      opts.on('-v', '--version')    { output_version ; exit 0 }
      opts.on('-h', '--help')       { output_help }
      opts.on('-V', '--verbose')    { @options.verbose = true }  
      opts.on('-q', '--quiet')      { @options.quiet = true }

      # TO DO - add additional options
            
      opts.parse!(@arguments) rescue return false
      
      process_options
      true      
    end

    # Performs post-parse processing on options
    def process_options
      @options.verbose = false if @options.quiet

      # deduce name and type out of source path
      script_path = @arguments[0]
    end
    
    def output_options
      puts "Options:\n"
      
      @options.marshal_dump.each do |name, val|        
        puts "  #{name} = #{val}"
      end
    end

    # True if required arguments were provided
    def arguments_valid?
      @arguments.length == 1 
    end
    
    # Setup the arguments
    def process_arguments
    end
    
    def output_help
      output_version
      RDoc::usage() #exits app
    end
    
    def output_usage
      RDoc::usage('usage') # gets usage from comments above
    end
    
    def output_version
      puts "#{File.basename(__FILE__)} version #{VERSION}"
    end
    
    def process_command
      filename = @arguments[0]

      unless File.exist?(filename)
        raise "Script file does not exists ... cannot parse it then can we?"
      end

      buffer = File.open(filename).read
      
      @script_recording = ScriptRecording.new(filename, buffer)
      @script_recording.record
      @script_recording.open_paragraphs_in_audacity
      @script_recording.render

      
      #process_standard_input # [Optional]
    end

    def process_standard_input
      input = @stdin.read      
      # TO DO - process input
      
      # [Optional]
      # @stdin.each do |line| 
      #  # TO DO - process each line
      #end
    end
end

# Create and run the application
app = App.new(ARGV, STDIN)
app.run

